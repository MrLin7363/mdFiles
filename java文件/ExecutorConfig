
import com.google.common.util.concurrent.ThreadFactoryBuilder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;

@Configuration
@EnableAsync
public class ExecutorConfig {
    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutorConfig.class);

    private static final Thread.UncaughtExceptionHandler EXCEPTION_HANDLER = (Thread thread,
        Throwable throwable) -> LOGGER.warn("thread {} run with exception, ", thread.getName(), throwable);
    /**
     * 配置用以定时调用健康检查接口的线程池
     *
     * @return asyncInvokeHealthCheckApiExecutor 用以定时调用健康检查接口的线程池
     */
    @Bean
    public Executor asyncInvokeHealthCheckApiExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        // 配置核心线程数
        executor.setCorePoolSize(2);
        // 最大线程数模仿浏览器设置
        executor.setMaxPoolSize(8);
        // 配置队列大小
        executor.setQueueCapacity(20);
        // 配置线程池中的线程的名称前缀
        executor.setThreadNamePrefix("test-");

        ThreadFactory threadFactory = new ThreadFactoryBuilder().setUncaughtExceptionHandler(EXCEPTION_HANDLER).build();
        executor.setThreadFactory(threadFactory);

        // rejection-policy：当pool已经达到max size的时候，如何处理新任务
        // CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        // 执行初始化
        executor.initialize();
        return executor;
    }
}
